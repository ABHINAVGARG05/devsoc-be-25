openapi: 3.0.0
info:
  title: Sample API
  description: A sample API to illustrate OpenAPI specification
  version: 1.0.0
servers:
  - url: https://api.example.com/v1

tags:
  - name: Admin
    description: Admin operations
  - name: Submission
    description: Submission operations

paths:
  /admin/users:
    get:
      tags:
        - Admin
      summary: List all users
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - Admin
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /admin/users/{email}:
    get:
      tags:
        - Admin
      summary: Get a user by email
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
  /admin/vitians:
    get:
      tags:
        - Admin
      summary: List all vitians
      responses:
        "200":
          description: A list of vitians
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /admin/ban:
    post:
      tags:
        - Admin
      summary: Ban user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BanUserReq"
      responses:
        "201":
          description: User banned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user banned successfully
  /admin/unban:
    post:
      tags:
        - Admin
      summary: Unban user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BanUserReq"
      responses:
        "201":
          description: User unbanned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user unbanned successfully
  /admin/teams:
    get:
      tags:
        - Admin
      summary: List all teams
      responses:
        "200":
          description: A list of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Teams"
  /admin/teams/{id}:
    get:
      tags:
        - Admin
      summary: Get a team by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: uuid
      responses:
        "200":
          description: A single team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teams"
        "404":
          description: Team not found
  /admin/teams/leader/{id}:
    get:
      tags:
        - Admin
      summary: Get the team leader by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: uuid
      responses:
        "200":
          description: Team leader
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Team leader not found
  /submission:
    post:
      tags:
        - Submission
      summary: Create new submission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSubmissionRequest"
      responses:
        201:
          description: Submission created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/Submission"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /submission/{teamId}:
    get:
      tags:
        - Submission
      summary: Get submission by team ID
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
          description: Team ID to fetch submission for
      responses:
        200:
          description: Submission retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/Submission"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Submission
      summary: Update submission
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSubmissionRequest"
      responses:
        200:
          description: Submission updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/Submission"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Submission
      summary: Delete submission
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Submission deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Submission deleted successfully"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: uuid
        name:
          type: string
        email:
          type: string
        team_id:
          type: uuid
        is_vitian:
          type: boolean
        reg_no:
          type: string
        password:
          type: string
        phone_no:
          type: string
        role:
          type: string
        is_leader:
          type: boolean
        college:
          type: string
        is_verified:
          type: boolean
        is_banned:
          type: boolean
    BanUserReq:
      type: object
      properties:
        email:
          type: string
    Teams:
      type: object
      properties:
        id:
          type: uuid
        name:
          type: string
        number_of_people:
          type: integer
        round_qualified:
          type: integer
        code:
          type: string
    Submission:
      type: object
      properties:
        team_id:
          type: string
          format: uuid
        github_link:
          type: string
          format: url
        figma_link:
          type: string
          format: url
        ppt_link:
          type: string
          format: url
        other_link:
          type: string
          format: url

    CreateSubmissionRequest:
      type: object
      required:
        - team_id
        - github_link
        - figma_link
      properties:
        team_id:
          type: string
          format: uuid
        github_link:
          type: string
          format: url
        figma_link:
          type: string
          format: url
        ppt_link:
          type: string
          format: url
        other_link:
          type: string
          format: url

    UpdateSubmissionRequest:
      type: object
      required:
        - github_link
        - figma_link
      properties:
        github_link:
          type: string
          format: url
        figma_link:
          type: string
          format: url
        ppt_link:
          type: string
          format: url
        other_link:
          type: string
          format: url

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            message:
              type: string
              example: "Submission created successfully"

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: fail
        data:
          type: object
          properties:
            error:
              type: string
              example: "Invalid request parameters"
