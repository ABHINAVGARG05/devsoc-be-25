openapi: 3.0.0
info:
  title: Devsoc Backend API
  description: The API for the DevSoc 25 hackathon backend
  version: 1.0.0
servers:
  - url: https://salad.codechefvit.com

tags:
  - name: Admin
    description: Admin operations
  - name: Submission
    description: Submission operations
  - name: Authentication
    description: Authentication operations

paths:
  /admin/users:
    get:
      tags:
        - Admin
      summary: List all users
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - Admin
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /admin/users/{email}:
    get:
      tags:
        - Admin
      summary: Get a user by email
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
  /admin/vitians:
    get:
      tags:
        - Admin
      summary: List all vitians
      responses:
        "200":
          description: A list of vitians
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /admin/ban:
    post:
      tags:
        - Admin
      summary: Ban user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BanUserReq"
      responses:
        "201":
          description: User banned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user banned successfully
  /admin/unban:
    post:
      tags:
        - Admin
      summary: Unban user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BanUserReq"
      responses:
        "201":
          description: User unbanned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user unbanned successfully
  /admin/teams:
    get:
      tags:
        - Admin
      summary: List all teams
      responses:
        "200":
          description: A list of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Teams"
  /admin/teams/{id}:
    get:
      tags:
        - Admin
      summary: Get a team by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: uuid
      responses:
        "200":
          description: A single team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teams"
        "404":
          description: Team not found
  /admin/teams/leader/{id}:
    get:
      tags:
        - Admin
      summary: Get the team leader by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: uuid
      responses:
        "200":
          description: Team leader
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Team leader not found
  /submission:
    post:
      tags:
        - Submission
      summary: Create a new submission
      description: Create a submission for a team with required project links
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - github_link
                - figma_link
                - ppt_link
                - team_id
              properties:
                github_link:
                  type: string
                  format: url
                figma_link:
                  type: string
                  format: url
                ppt_link:
                  type: string
                  format: url
                other_link:
                  type: string
                  format: url
                team_id:
                  type: string
                  format: uuid
      responses:
        201:
          description: Submission created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      github_link:
                        type: string
                        format: url
                      figma_link:
                        type: string
                        format: url
                      ppt_link:
                        type: string
                        format: url
                      other_link:
                        type: string
                        format: url
                      team_id:
                        type: string
                        format: uuid
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /create/idea:
    post:
      tags:
        - Idea
      summary: Create new idea
      description: Creates a new idea for a team, accessible only by team leaders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIdeaRequest"
      responses:
        201:
          description: Idea created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Idea created successfully"
                      error:
                        type: string
                        nullable: true
        400:
          description: Invalid request or invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden - User does not belong to a team or is not a team leader
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        409:
          description: Conflict - An idea already exists for this team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error - Failed to create idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /idea/update/{id}:
    put:
      tags:
        - Idea
      summary: Update an existing idea
      description: Updates an idea for the team. Only team leaders can update ideas, and the team must match the idea's team.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the idea to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIdeaParams"
      responses:
        200:
          description: Idea updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Idea updated successfully"
        400:
          description: Invalid ID format or invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden - User does not belong to a team, is not a leader, or the team's ID does not match the idea's team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Idea not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error - Failed to update idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /idea:
    get:
      tags:
        - Idea
      summary: Get ideas for the current team
      description: Fetches all ideas related to the user's team. Only users who belong to a team can access the ideas.
      responses:
        200:
          description: Ideas fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Ideas fetched successfully"
                      ideas:
                        type: array
                        items:
                          $ref: "#/components/schemas/GetIdeaByTeamIDRow"
        403:
          description: Forbidden - User does not belong to any team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error - Failed to fetch ideas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /submission/{teamId}:
    get:
      tags:
        - Submission
      summary: Get submission for a team
      description: Retrieves the submission details for a specific team
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the team
      responses:
        200:
          description: Submission retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      github_link:
                        type: string
                        format: url
                      figma_link:
                        type: string
                        format: url
                      ppt_link:
                        type: string
                        format: url
                      other_link:
                        type: string
                        format: url
                      team_id:
                        type: string
                        format: uuid
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Invalid user
                          - Invalid team ID format
                          - User is not part of any team
                          - User is not part of the team
    post:
      tags:
        - Submission
      summary: Update an existing submission
      description: Update submission details for a specific team
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the team whose submission to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                github_link:
                  type: string
                  format: url
                figma_link:
                  type: string
                  format: url
                ppt_link:
                  type: string
                  format: url
                other_link:
                  type: string
                  format: url
      responses:
        200:
          description: Submission updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      github_link:
                        type: string
                        format: url
                      figma_link:
                        type: string
                        format: url
                      ppt_link:
                        type: string
                        format: url
                      other_link:
                        type: string
                        format: url
                      team_id:
                        type: string
                        format: uuid
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Invalid request body
                          - Invalid team ID format
                          - User is not part of any team
                          - Invalid user
                          - User is not part of the team
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user account
      description: Creates a new user account for VIT students with validation and duplicate checks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        200:
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User signed up successfully
        400:
          description: Invalid request body or validation errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - $ref: "#/components/schemas/ValidationErrorResponse"
        409:
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - User with this email already exists
                          - User with this registration number already exists
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Failed to hash password
                          - Failed to create user
    delete:
      tags:
        - Submission
      summary: Delete a team's submission
      description: Deletes an existing submission for a specific team
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the team whose submission to delete
      responses:
        200:
          description: Submission deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Submission deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Invalid team ID format
                          - User is not part of any team
                          - Invalid user
                          - User is not part of the team
  /auth/send-otp:
    post:
      tags:
        - Authentication
      summary: Send OTP to user's email
      description: Sends a one-time password to the specified email address for verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendOTPRequest"
      responses:
        200:
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: OTP sent successfully
        400:
          description: Invalid request body or validation errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - $ref: "#/components/schemas/ValidationErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Failed to get user
                          - Failed to generate OTP
  /auth/verify-otp:
    post:
      tags:
        - Authentication
      summary: Verify OTP for user email
      description: Validates the OTP sent to user's email and marks the user as verified
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOTPRequest"
      responses:
        200:
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User verified successfully
        400:
          description: Invalid request body or validation errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - $ref: "#/components/schemas/ValidationErrorResponse"
        404:
          description: User not found or OTP expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - User not found
                          - OTP invalid/expired
        401:
          description: Invalid OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        example: Invalid OTP
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Failed to get user
                          - Failed to delete OTP
                          - Failed to verify user
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate user and generate access token
      description: Validates user credentials, checks verification status, and returns JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User logged in successfully
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIs...
        400:
          description: Invalid request body or validation errors
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - $ref: "#/components/schemas/ValidationErrorResponse"
        401:
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - User not verified
                          - User banned
                          - Invalid password
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Failed to get user
                          - Failed to generate token
  /auth/update-password:
    post:
      tags:
        - Authentication
      summary: Update user password using OTP
      description: Updates user password after validating OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        200:
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Password updated successfully
        400:
          description: Invalid request body, validation errors, or invalid OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Invalid request body
                          - OTP expired or invalid
                          - Invalid OTP
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Failed to get user
                          - Failed to hash password
                          - Failed to update password
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT access token
      description: Generates new access and refresh tokens using existing refresh token
      parameters:
        - in: cookie
          name: refresh_token
          required: true
          schema:
            type: string
          description: Valid refresh token cookie
      responses:
        200:
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Token refreshed successfully
          headers:
            Set-Cookie:
              schema:
                type: string
              description: Sets new JWT and refresh token cookies
        401:
          description: Invalid or missing refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Refresh token not found
                          - Invalid refresh token
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Failed to generate token
                          - Failed to generate refresh token
  /panel/createscore:
    post:
      summary: Create a new score
      tags:
        - Panel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateScore"
      responses:
        "200":
          description: Score created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Score created successfully
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
  /panel/deletescore/{id}:
    delete:
      summary: Delete a score
      tags:
        - Panel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Score deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  /panel/getscore/{teamid}:
    get:
      summary: Get score by team ID
      tags:
        - Panel
      parameters:
        - name: teamid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Score retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Score"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  /panel/updatescore/{id}:
    put:
      summary: Update a score
      tags:
        - Panel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateScore"
      responses:
        "200":
          description: Score updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Score updated successfully
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
  /panel/getsubmission/{teamId}:
    get:
      summary: Get submission by team ID
      tags:
        - Panel
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Submission retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submissions"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /team/join:
    post:
      summary: Join a team
      description: Allows a user to join a team using a team code.
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JoinTeamRequest"
      responses:
        "200":
          description: Successfully joined the team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad request or invalid team code.
        "500":
          description: Internal server error.
  /team/create:
    post:
      summary: Create a team
      description: Allows a user to create a new team.
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamRequest"
      responses:
        "200":
          description: Successfully created the team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  team:
                    $ref: "#/components/schemas/Team"
        "400":
          description: Bad request or team name already exists.
        "500":
          description: Internal server error.
  /team/leave:
    post:
      summary: Leave a team
      description: Allows a user to leave their current team.
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LeaveTeamRequest"
      responses:
        "200":
          description: Successfully left the team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad request or user not part of a team.
        "500":
          description: Internal server error.
  /team/kick:
    post:
      summary: Kick a team member
      description: Allows a team leader to remove a member from their team.
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KickMemberRequest"
      responses:
        "200":
          description: Successfully removed the team member.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad request or unauthorized access.
        "500":
          description: Internal server error.
  /team/delete:
    post:
      summary: Delete a team
      description: Allows a team leader to delete their team.
      tags:
        - Team
      responses:
        "200":
          description: Successfully deleted the team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad request or unauthorized access.
        "500":
          description: Internal server error.
  /team/update:
    put:
      summary: Update team name
      description: Allows a team leader to update their team name.
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTeamNameRequest"
      responses:
        "200":
          description: Successfully updated the team name.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: string
        "400":
          description: Bad request or unauthorized access.
        "500":
          description: Internal server error.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: uuid
        name:
          type: string
        email:
          type: string
        team_id:
          type: uuid
        is_vitian:
          type: boolean
        reg_no:
          type: string
        password:
          type: string
        phone_no:
          type: string
        role:
          type: string
        is_leader:
          type: boolean
        college:
          type: string
        is_verified:
          type: boolean
        is_banned:
          type: boolean
    BanUserReq:
      type: object
      properties:
        email:
          type: string
    Teams:
      type: object
      properties:
        id:
          type: uuid
        name:
          type: string
        number_of_people:
          type: integer
        round_qualified:
          type: integer
        code:
          type: string
    Submission:
      type: object
      properties:
        team_id:
          type: string
          format: uuid
        github_link:
          type: string
          format: url
        figma_link:
          type: string
          format: url
        ppt_link:
          type: string
          format: url
        other_link:
          type: string
          format: url

    CreateSubmissionRequest:
      type: object
      required:
        - team_id
        - github_link
        - figma_link
      properties:
        team_id:
          type: string
          format: uuid
        github_link:
          type: string
          format: url
        figma_link:
          type: string
          format: url
        ppt_link:
          type: string
          format: url
        other_link:
          type: string
          format: url

    UpdateSubmissionRequest:
      type: object
      required:
        - github_link
        - figma_link
      properties:
        github_link:
          type: string
          format: url
        figma_link:
          type: string
          format: url
        ppt_link:
          type: string
          format: url
        other_link:
          type: string
          format: url

    SubmissionSuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            message:
              type: string
              example: "Submission created successfully"

    SubmissionErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: fail
        data:
          type: object
          properties:
            error:
              type: string
              example: "Invalid request parameters"

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [fail]
        data:
          type: object
          properties:
            error:
              type: string

    ValidationErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [fail]
        data:
          type: object
          additionalProperties:
            type: string
          example:
            email: "must be a valid email address"
            password: "is required"

    ConflictErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [fail]
        data:
          type: object
          properties:
            error:
              type: string
              enum:
                - "User with this email already exists"
                - "User with this registration number already exists"

    InternalErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [fail]
        data:
          type: object
          properties:
            error:
              type: string
              enum:
                - "Failed to hash password"
                - "Failed to create user"

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success]
        data:
          type: object
          properties:
            message:
              type: string
              example: "User signed up successfully"
    SignupRequest:
      type: object
      required:
        - user_name
        - email
        - reg_no
        - password
        - phone_no
      properties:
        user_name:
          type: string
          description: User's name
        email:
          type: string
          format: email
          description: Email ending with `@vitstudent.ac.in`
          pattern: '^[a-zA-Z0-9._%+-]+@vitstudent\.ac\.in$'
        reg_no:
          type: string
          description: Registration number
        password:
          type: string
          description: User's password
        phone_no:
          type: string
          description: User's phone number
    SendOTPRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email ending with `@vitstudent.ac.in`
          pattern: '^[a-zA-Z0-9._%+-]+@vitstudent\.ac\.in$'
    VerifyOTPRequest:
      type: object
      required:
        - email
        - otp
      properties:
        email:
          type: string
          format: email
          description: Email ending with `@vitstudent.ac.in`
          pattern: '^[a-zA-Z0-9._%+-]+@vitstudent\.ac\.in$'
        otp:
          type: string
          description: One Time Password (OTP)
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email ending with `@vitstudent.ac.in`
          pattern: '^[a-zA-Z0-9._%+-]+@vitstudent\.ac\.in$'
        password:
          type: string
          description: User's password
    UpdatePasswordRequest:
      type: object
      required:
        - email
        - new_password
        - otp
      properties:
        email:
          type: string
          format: email
          description: Email ending with `@vitstudent.ac.in`
          pattern: '^[a-zA-Z0-9._%+-]+@vitstudent\.ac\.in$'
        new_password:
          type: string
          description: New password
        otp:
          type: string
          description: One Time Password (OTP)
    CreateScore:
      type: object
      required:
        - design
        - implementation
        - presentation
        - round
        - team_id
      properties:
        design:
          type: integer
          minimum: 0
          maximum: 10
        implementation:
          type: integer
          minimum: 0
          maximum: 10
        presentation:
          type: integer
          minimum: 0
          maximum: 10
        round:
          type: integer
        team_id:
          type: string
          format: uuid
    UpdateScore:
      type: object
      required:
        - design
        - implementation
        - presentation
        - round
        - team_id
      properties:
        design:
          type: integer
          minimum: 0
          maximum: 10
        implementation:
          type: integer
          minimum: 0
          maximum: 10
        presentation:
          type: integer
          minimum: 0
          maximum: 10
        round:
          type: integer
        team_id:
          type: string
          format: uuid
    Submissions:
      type: object
      properties:
        github_link:
          type: string
        figma_link:
          type: string
        ppt_link:
          type: string
        other_link:
          type: string
        team_id:
          type: string
          format: uuid

    Score:
      type: object
      properties:
        design:
          type: integer
        implementation:
          type: integer
        presentation:
          type: integer
        round:
          type: integer
        team_id:
          type: string
          format: uuid
    Response:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          additionalProperties:
            type: string

    CreateIdeaRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        track:
          type: string
        team_id:
          type: string
          format: uuid
        is_selected:
          type: boolean
    UpdateIdeaParams:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        track:
          type: string
        is_selected:
          type: boolean

    GetIdeaByTeamIDRow:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        track:
          type: string

    JoinTeamRequest:
      type: object
      properties:
        code:
          type: string
          description: Team code to join.
      required:
        - code
    CreateTeamRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the team to be created.
      required:
        - name
    LeaveTeamRequest:
      type: object
      properties:
        userId:
          type: string
          description: ID of the user leaving the team.
      required:
        - userId
    KickMemberRequest:
      type: object
      properties:
        userId:
          type: string
          description: ID of the user to be kicked.
      required:
        - userId
    UpdateTeamNameRequest:
      type: object
      properties:
        name:
          type: string
          description: New name for the team.
      required:
        - name
