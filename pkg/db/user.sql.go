// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const banUser = `-- name: BanUser :exec
UPDATE users
SET is_banned = TRUE
WHERE email = $1
`

func (q *Queries) BanUser(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, banUser, email)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    id, name, team_id, email, is_vitian, reg_no, password, phone_no, role, is_leader, college, is_verified, is_banned
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
)
`

type CreateUserParams struct {
	ID         uuid.UUID
	Name       string
	TeamID     uuid.NullUUID
	Email      string
	IsVitian   bool
	RegNo      string
	Password   string
	PhoneNo    string
	Role       string
	IsLeader   bool
	College    string
	IsVerified bool
	IsBanned   bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.TeamID,
		arg.Email,
		arg.IsVitian,
		arg.RegNo,
		arg.Password,
		arg.PhoneNo,
		arg.Role,
		arg.IsLeader,
		arg.College,
		arg.IsVerified,
		arg.IsBanned,
	)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, team_id, email, is_vitian, reg_no, password, phone_no, role, is_leader, college, is_verified, is_banned FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TeamID,
			&i.Email,
			&i.IsVitian,
			&i.RegNo,
			&i.Password,
			&i.PhoneNo,
			&i.Role,
			&i.IsLeader,
			&i.College,
			&i.IsVerified,
			&i.IsBanned,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllVitians = `-- name: GetAllVitians :many
SELECT id, name, team_id, email, is_vitian, reg_no, password, phone_no, role, is_leader, college, is_verified, is_banned FROM users WHERE is_vitian = TRUE
`

func (q *Queries) GetAllVitians(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllVitians)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TeamID,
			&i.Email,
			&i.IsVitian,
			&i.RegNo,
			&i.Password,
			&i.PhoneNo,
			&i.Role,
			&i.IsLeader,
			&i.College,
			&i.IsVerified,
			&i.IsBanned,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, team_id, email, is_vitian, reg_no, password, phone_no, role, is_leader, college, is_verified, is_banned FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TeamID,
		&i.Email,
		&i.IsVitian,
		&i.RegNo,
		&i.Password,
		&i.PhoneNo,
		&i.Role,
		&i.IsLeader,
		&i.College,
		&i.IsVerified,
		&i.IsBanned,
	)
	return i, err
}

const unbanUser = `-- name: UnbanUser :exec
UPDATE users
SET is_banned = FALSE
WHERE email = $1
`

func (q *Queries) UnbanUser(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, unbanUser, email)
	return err
}
