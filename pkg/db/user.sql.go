// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const banUser = `-- name: BanUser :exec
UPDATE users
SET is_banned = TRUE
WHERE email = $1
`

func (q *Queries) BanUser(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, banUser, email)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    id,
    team_id,
    first_name,
    last_name, 
    email,
    phone_no,
    gender,
    reg_no,
    vit_email,
    hostel_block,
    room_no,
    github_profile,
    password,
    role,
    is_leader,
    is_verified,
    is_banned
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17
)
`

type CreateUserParams struct {
	ID            uuid.UUID
	TeamID        uuid.NullUUID
	FirstName     string
	LastName      string
	Email         string
	PhoneNo       string
	Gender        string
	RegNo         string
	VitEmail      string
	HostelBlock   string
	RoomNo        int32
	GithubProfile string
	Password      string
	Role          string
	IsLeader      bool
	IsVerified    bool
	IsBanned      bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.TeamID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNo,
		arg.Gender,
		arg.RegNo,
		arg.VitEmail,
		arg.HostelBlock,
		arg.RoomNo,
		arg.GithubProfile,
		arg.Password,
		arg.Role,
		arg.IsLeader,
		arg.IsVerified,
		arg.IsBanned,
	)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, team_id, first_name, last_name, email, phone_no, gender, reg_no, vit_email, hostel_block, room_no, github_profile, password, role, is_leader, is_verified, is_banned FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PhoneNo,
			&i.Gender,
			&i.RegNo,
			&i.VitEmail,
			&i.HostelBlock,
			&i.RoomNo,
			&i.GithubProfile,
			&i.Password,
			&i.Role,
			&i.IsLeader,
			&i.IsVerified,
			&i.IsBanned,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllVitians = `-- name: GetAllVitians :many
SELECT id, team_id, first_name, last_name, email, phone_no, gender, reg_no, vit_email, hostel_block, room_no, github_profile, password, role, is_leader, is_verified, is_banned FROM users WHERE is_vitian = TRUE
`

func (q *Queries) GetAllVitians(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllVitians)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PhoneNo,
			&i.Gender,
			&i.RegNo,
			&i.VitEmail,
			&i.HostelBlock,
			&i.RoomNo,
			&i.GithubProfile,
			&i.Password,
			&i.Role,
			&i.IsLeader,
			&i.IsVerified,
			&i.IsBanned,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamLeader = `-- name: GetTeamLeader :one
SELECT id, team_id, first_name, last_name, email, phone_no, gender, reg_no, vit_email, hostel_block, room_no, github_profile, password, role, is_leader, is_verified, is_banned FROM users WHERE team_id = $1 AND is_leader = TRUE
`

func (q *Queries) GetTeamLeader(ctx context.Context, teamID uuid.NullUUID) (User, error) {
	row := q.db.QueryRow(ctx, getTeamLeader, teamID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNo,
		&i.Gender,
		&i.RegNo,
		&i.VitEmail,
		&i.HostelBlock,
		&i.RoomNo,
		&i.GithubProfile,
		&i.Password,
		&i.Role,
		&i.IsLeader,
		&i.IsVerified,
		&i.IsBanned,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, team_id, first_name, last_name, email, phone_no, gender, reg_no, vit_email, hostel_block, room_no, github_profile, password, role, is_leader, is_verified, is_banned FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNo,
		&i.Gender,
		&i.RegNo,
		&i.VitEmail,
		&i.HostelBlock,
		&i.RoomNo,
		&i.GithubProfile,
		&i.Password,
		&i.Role,
		&i.IsLeader,
		&i.IsVerified,
		&i.IsBanned,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, team_id, first_name, last_name, email, phone_no, gender, reg_no, vit_email, hostel_block, room_no, github_profile, password, role, is_leader, is_verified, is_banned FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNo,
		&i.Gender,
		&i.RegNo,
		&i.VitEmail,
		&i.HostelBlock,
		&i.RoomNo,
		&i.GithubProfile,
		&i.Password,
		&i.Role,
		&i.IsLeader,
		&i.IsVerified,
		&i.IsBanned,
	)
	return i, err
}

const getUserByPhoneNo = `-- name: GetUserByPhoneNo :one
SELECT id, team_id, first_name, last_name, email, phone_no, gender, reg_no, vit_email, hostel_block, room_no, github_profile, password, role, is_leader, is_verified, is_banned FROM users WHERE phone_no = $1
`

func (q *Queries) GetUserByPhoneNo(ctx context.Context, phoneNo string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNo, phoneNo)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNo,
		&i.Gender,
		&i.RegNo,
		&i.VitEmail,
		&i.HostelBlock,
		&i.RoomNo,
		&i.GithubProfile,
		&i.Password,
		&i.Role,
		&i.IsLeader,
		&i.IsVerified,
		&i.IsBanned,
	)
	return i, err
}

const getUserByRegNo = `-- name: GetUserByRegNo :one
SELECT id, team_id, first_name, last_name, email, phone_no, gender, reg_no, vit_email, hostel_block, room_no, github_profile, password, role, is_leader, is_verified, is_banned FROM users WHERE reg_no = $1
`

func (q *Queries) GetUserByRegNo(ctx context.Context, regNo string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByRegNo, regNo)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNo,
		&i.Gender,
		&i.RegNo,
		&i.VitEmail,
		&i.HostelBlock,
		&i.RoomNo,
		&i.GithubProfile,
		&i.Password,
		&i.Role,
		&i.IsLeader,
		&i.IsVerified,
		&i.IsBanned,
	)
	return i, err
}

const getUserByVitEmail = `-- name: GetUserByVitEmail :one
SELECT id, team_id, first_name, last_name, email, phone_no, gender, reg_no, vit_email, hostel_block, room_no, github_profile, password, role, is_leader, is_verified, is_banned FROM users WHERE vit_email = $1
`

func (q *Queries) GetUserByVitEmail(ctx context.Context, vitEmail string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByVitEmail, vitEmail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNo,
		&i.Gender,
		&i.RegNo,
		&i.VitEmail,
		&i.HostelBlock,
		&i.RoomNo,
		&i.GithubProfile,
		&i.Password,
		&i.Role,
		&i.IsLeader,
		&i.IsVerified,
		&i.IsBanned,
	)
	return i, err
}

const unbanUser = `-- name: UnbanUser :exec
UPDATE users
SET is_banned = FALSE
WHERE email = $1
`

func (q *Queries) UnbanUser(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, unbanUser, email)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password = $2
WHERE email = $1
`

type UpdatePasswordParams struct {
	Email    string
	Password string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.Email, arg.Password)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET first_name = $2,
    last_name = $3,
    email = $4,
    phone_no = $5,
    gender = $6,
    reg_no = $7,
    vit_email = $8,
    hostel_block = $9,
    room_no = $10,
    github_profile = $11
WHERE id = $1
`

type UpdateUserParams struct {
	ID            uuid.UUID
	FirstName     string
	LastName      string
	Email         string
	PhoneNo       string
	Gender        string
	RegNo         string
	VitEmail      string
	HostelBlock   string
	RoomNo        int32
	GithubProfile string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNo,
		arg.Gender,
		arg.RegNo,
		arg.VitEmail,
		arg.HostelBlock,
		arg.RoomNo,
		arg.GithubProfile,
	)
	return err
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users
SET is_verified = TRUE
WHERE email = $1
`

func (q *Queries) VerifyUser(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, verifyUser, email)
	return err
}
