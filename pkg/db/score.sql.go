// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: score.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createScore = `-- name: CreateScore :exec
INSERT INTO score (id, team_id, design, implementation, presentation, round,  innovation, teamwork, comment)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateScoreParams struct {
	ID             uuid.UUID
	TeamID         uuid.UUID
	Design         int32
	Implementation int32
	Presentation   int32
	Round          int32
	Innovation     int32
	Teamwork       int32
	Comment        *string
}

func (q *Queries) CreateScore(ctx context.Context, arg CreateScoreParams) error {
	_, err := q.db.Exec(ctx, createScore,
		arg.ID,
		arg.TeamID,
		arg.Design,
		arg.Implementation,
		arg.Presentation,
		arg.Round,
		arg.Innovation,
		arg.Teamwork,
		arg.Comment,
	)
	return err
}

const deleteScore = `-- name: DeleteScore :exec
DELETE FROM score
WHERE id = $1
`

func (q *Queries) DeleteScore(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteScore, id)
	return err
}

const getTeamScores = `-- name: GetTeamScores :many
SELECT id, team_id, design, implementation, presentation, round, innovation, teamwork, comment
FROM score
WHERE team_id = $1
`

func (q *Queries) GetTeamScores(ctx context.Context, teamID uuid.UUID) ([]Score, error) {
	rows, err := q.db.Query(ctx, getTeamScores, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Score
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.Design,
			&i.Implementation,
			&i.Presentation,
			&i.Round,
			&i.Innovation,
			&i.Teamwork,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScore = `-- name: UpdateScore :exec
UPDATE score
SET team_id = $1, design = $2, implementation = $3, presentation = $4, round = $5, innovation = $6, teamwork = $7, comment = $8
WHERE id = $9
`

type UpdateScoreParams struct {
	TeamID         uuid.UUID
	Design         int32
	Implementation int32
	Presentation   int32
	Round          int32
	Innovation     int32
	Teamwork       int32
	Comment        *string
	ID             uuid.UUID
}

func (q *Queries) UpdateScore(ctx context.Context, arg UpdateScoreParams) error {
	_, err := q.db.Exec(ctx, updateScore,
		arg.TeamID,
		arg.Design,
		arg.Implementation,
		arg.Presentation,
		arg.Round,
		arg.Innovation,
		arg.Teamwork,
		arg.Comment,
		arg.ID,
	)
	return err
}
